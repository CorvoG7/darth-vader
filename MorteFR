import robocode.*;
import java.awt.Color;

public class MorteFR extends AdvancedRobot {
    private double myX;
    private double myY;
    private double enemyX;
    private double enemyY;

    public void run() {
        setColors(Color.BLUE, Color.BLUE, Color.BLUE); // Definir cores do rob√¥

        while (true) {
            updateMyInfo();
            updateEnemyInfo();

            selectStrategy();
            executeStrategy();
            execute();
        }
    }

    private void updateMyInfo() {
        myX = getX();
        myY = getY();
    }

    private void updateEnemyInfo() {
        ScannedRobotEvent closestEnemy = getClosestEnemy();
        if (closestEnemy != null) {
            double angleToEnemy = getHeadingRadians() + closestEnemy.getBearingRadians();
            enemyX = getX() + Math.sin(angleToEnemy) * closestEnemy.getDistance();
            enemyY = getY() + Math.cos(angleToEnemy) * closestEnemy.getDistance();
        }
    }

    private ScannedRobotEvent getClosestEnemy() {
        ScannedRobotEvent closestEnemy = null;
        double minDistance = Double.MAX_VALUE;

        for (ScannedRobotEvent enemy : getScannedRobotEvents()) {
            double distance = enemy.getDistance();
            if (distance < minDistance) {
                minDistance = distance;
                closestEnemy = enemy;
            }
        }

        return closestEnemy;
    }

    private void selectStrategy() {
        if (isCloseToEnemy()) {
            attackEnemy();
        } else {
            avoidEnemy();
        }
    }

    private void executeStrategy() {
        if (isCloseToEnemy()) {
            fire(1);
        } else {
            turnRight(90);
            ahead(100);
        }
    }

    private void attackEnemy() {
        fire(1);
    }

    private void avoidEnemy() {
        turnRight(90);
        ahead(100);
    }

    private boolean isCloseToEnemy() {
        return getDistanceToEnemy() < 50;
    }

    private double getDistanceToEnemy() {
        return Math.sqrt(Math.pow(enemyX - myX, 2) + Math.pow(enemyY - myY, 2));
    }
}
