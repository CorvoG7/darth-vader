import robocode.*;
import java.awt.Color;

public class darth vader extends AdvancedRobot {

    private double lastEnemyBearing;
    private boolean isMovingForward = true;
    private int direction = 1; // Direção de movimento

    public void run() {
        setColors(Color.red, Color.blue, Color.green); // Define as cores do robô
        setAdjustRadarForRobotTurn(true); // Configura o radar para girar independentemente do robô
        setAdjustGunForRobotTurn(true); // Configura a arma para girar independentemente do robô

        while(true) {
            turnRadarRight(360); // Gira o radar em um círculo completo para procurar por outros robôs
            if(isMovingForward) {
                setAhead(Double.POSITIVE_INFINITY); // Move para frente indefinidamente
            } else {
                setBack(Double.POSITIVE_INFINITY); // Move para trás indefinidamente
            }
            execute();
        }
    }

    public void onScannedRobot(ScannedRobotEvent e) {
        double enemyBearing = e.getBearing(); // Obtém o ângulo do inimigo
        double enemyDistance = e.getDistance(); // Obtém a distância do inimigo

        // Mirar no robô inimigo
        turnGunRight(normalizeBearing(getHeading() + enemyBearing - getGunHeading()));

        // Decidir se deve atirar com base na distância do inimigo
        if(enemyDistance < 300) {
            fire(3); // Atira com potência 3 se o inimigo estiver dentro de 300 pixels
        } else {
            fire(2); // Atira com potência 2 se o inimigo estiver distante
        }

        // Esquivar de balas inimigas
        dodgeBullets();

        // Memorizar o ângulo do inimigo para mirar em caso de perda de visão
        lastEnemyBearing = enemyBearing;
    }

    public void onHitByBullet(HitByBulletEvent e) {
        // Executar manobra evasiva ao ser atingido por uma bala
        setTurnRight(e.getBearing() + 90);
        setAhead(100 * direction);
        execute();
    }

    public void onHitWall(HitWallEvent e) {
        // Executar manobra ao colidir com uma parede
        direction *= -1; // Inverter a direção
        setAhead(150 * direction);
        execute();
    }

    public void onHitRobot(HitRobotEvent e) {
        // Executar manobra ao colidir com outro robô
        if (e.isMyFault()) {
            back(100);
            execute();
        }
    }

    // Função para esquivar de balas inimigas
    private void dodgeBullets() {
        setTurnRight(lastEnemyBearing + 90);
        setAhead(100 * direction);
        execute();
    }

    // Função para normalizar o ângulo entre -180 e 180 graus
    private double normalizeBearing(double angle) {
        while(angle > 180) angle -= 360;
        while(angle < -180) angle += 360;
        return angle;
    }
}
